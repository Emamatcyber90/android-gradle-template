// may be used to check if wiremock is running
Process p1 = Runtime.getRuntime().exec("curl " + obtainCurrentIpAddress() + ":1337/");
int returnVal = p1.waitFor();
boolean reachable = (returnVal == 0);
println "\n Wiremock is reachable $reachable\n"

// replace the #const_wiremock_ip# with your current ip address for test with wiremock
android.applicationVariants.all { variant ->
    variant.mergeResources.doLast {
        def String localIp = obtainCurrentIpAddress()
        File valuesFile = file("${buildDir}/intermediates/res/merged/debug/values/values.xml")
        if (valuesFile.exists()) {
            String content = valuesFile.getText('UTF-8')
            content = content.replaceAll("#const_wiremock_ip#", localIp)
            valuesFile.write(content, 'UTF-8')
        } else {
            println "Warning: value.xml not found for replace current ip"
        }
    }
}

def String obtainCurrentIpAddress() {

    def wantedInterfaceDisplayName = System.getenv("TEST_MOCK_IFACE");

    if ((wantedInterfaceDisplayName != null) && (!wantedInterfaceDisplayName.isEmpty())) {
        println "\n Interface wanted: " + wantedInterfaceDisplayName
    } else {
        println "\n No interface wanted, you can select one by setting the interface name to environment variable TEST_MOCK_IFACE"
    }

    def ipAddress = null;

    Enumeration networkInterfaces = NetworkInterface.getNetworkInterfaces();
    while (networkInterfaces.hasMoreElements()) {
        NetworkInterface networkInterface = (NetworkInterface) networkInterfaces.nextElement();

        Enumeration inetAddresses = networkInterface.getInetAddresses();
        InetAddress inetAddress = (InetAddress) inetAddresses.nextElement();
        println " Found network [${networkInterface.getDisplayName()}] with IP ${inetAddress.getHostAddress()}"

        if (wantedInterfaceDisplayName?.trim() && !wantedInterfaceDisplayName.equalsIgnoreCase(networkInterface.displayName)) {
            continue;
        }

        if (ipAddress == null) {
            ipAddress = inetAddress.getHostAddress();
            println " Selected network ${ipAddress}"
        }
    }

    ipAddress
}

