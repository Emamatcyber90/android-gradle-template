package com.template.project

import android.annotation.SuppressLint
import androidx.appcompat.app.AppCompatActivity
import androidx.navigation.findNavController
import kotlinx.android.synthetic.main.activity_main.*
import org.androidannotations.annotations.AfterViews
import org.androidannotations.annotations.EActivity

/**
 * This application use the single activity architecture which was noted as recommended from google blog.
 *
 *(search: single-Activity) https://android-developers.googleblog.com/2018/05/use-android-jetpack-to-accelerate-your.html
 */
@SuppressLint("Registered" /* instead we have registered the enhanced class generated by AndroidAnnotations */)
@EActivity(R.layout.activity_main)
class MainActivity : AppCompatActivity() {

    private val navController by lazy { findNavController(R.id.nav_host_fragment) }

    @AfterViews
    fun setup() {
        setSupportActionBar(toolbar)

        navController.addOnDestinationChangedListener { _, destination, _ ->
            // Change title at navigation.
            // Until there is a proper way of doing that https://issuetracker.google.com/issues/80267266
            // NavigationUi does mostly the same at setupWithNavController(Toolbar, NavController) and could replace this.
            this.title = destination.label

            // As default we hide the menu/up button.
            // NavigationUi does this handling with setupWithNavController(Toolbar, NavController) and could replace this.
            this.supportActionBar!!.setDisplayHomeAsUpEnabled(false)
        }

        // Use the navigation architecture component configuration for the up navigation.
        // NavigationUi does mostly the same at setupWithNavController(Toolbar, NavController) and could replace this.
        toolbar.setNavigationOnClickListener { navController.navigateUp() }
    }
}
