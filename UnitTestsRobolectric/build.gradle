buildscript {
    dependencies {
        classpath "com.android.tools.build:gradle:$ext.androidToolsBuildGradle"
        classpath "com.novoda:gradle-android-test-plugin:0.9.9-SNAPSHOT"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.4.0'
    }
}

apply plugin: 'java'

test.reports.html.enabled = false     // just clean up dashboard from not generated reports
test.reports.junitXml.enabled = false // just clean up dashboard from not generated reports

apply plugin: 'android-test'
apply plugin: "jacoco"
apply plugin: 'coveralls'

android {
    projectUnderTest ':AndroidSample'
}

dependencies {
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile('com.squareup:fest-android:1.0.+') { exclude module: 'support-v4' }
    testCompile ('org.robolectric:robolectric:2.3') {
        exclude module: 'classworlds'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-plugin-registry'
        exclude module: 'maven-profile'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'nekohtml'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'support-v4' // crazy but my android studio don't like this dependency and to fix it remove .idea and re import project
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-http-shared'
        exclude module: 'wagon-provider-api'
    }
}

jacoco {
    toolVersion = "0.7.0.201403182114"
}

def coverageSourceDirs = [
        '../AndroidSample/src/main/java',
        '../AndroidSample/src/gen',
        '../AndroidSample/build/source/apt/debug',
        '../AndroidSample/build/source/buildConfig/debug',
        '../AndroidSample/build/source/r/debug']


jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
    // class R is used, but usage will not be covered, so ignore this class from report
    classDirectories = fileTree(dir: '../AndroidSample/build/classes/debug', exclude: 'com/example/R*.class')
    additionalSourceDirs = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')
}

// Send code coverage report to coveralls with coveralls-gradle-plugin. To get the plugin working
// we need to include the coverageSourceDirs as main sources. But this conflicts with android
// studio and also with jacocoTestReport task.
compileJava.enabled = false // avoid jacocoTestReport task conflicts
coveralls {
    if(project.hasProperty('travisCi')) { // avoid android studio source root conflicts
        sourceSets.main.java.srcDirs += coverageSourceDirs
    }
}

// just clean up dashboard, following reports are not of interest
testRelease.reports.html.enabled = false
testRelease.reports.junitXml.enabled = false
testDebug.reports.junitXml.enabled = false

apply plugin: 'idea'
// workaround to use android studio and robolectric without build classpath effort
// the 'outputDir' is used as reference to the resource directory, found no other way
// ** current has this workaround no effect, since android studio 6.0 **
idea {
    module {
        outputDir = file('build/resources/testDebug')
        testOutputDir = file('build/test-classes/debug')
    }
}

// new workaround to force add custom output dirs for android studio
task addTest {
    def file = file(project.name + ".iml")
    doLast {
        try {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1]
            def outputNode = parsedXml.component[1].output[0]
            def outputTestNode = parsedXml.component[1].'output-test'[0]
            def rewrite = false

            new Node(node, 'sourceFolder', ['url': 'file://$MODULE_DIR$/' + "${it}", 'isTestSource': "true"])

            if(outputNode == null) {
                new Node(node, 'output', ['url': 'file://$MODULE_DIR$/build/resources/testDebug'])
            } else {
                if(outputNode.attributes['url'] != 'file://$MODULE_DIR$/build/resources/testDebug') {
                    outputNode.attributes = ['url': 'file://$MODULE_DIR$/build/resources/testDebug']
                    rewrite = true
                }
            }

            if(outputTestNode == null) {
                new Node(node, 'output-test', ['url': 'file://$MODULE_DIR$/build/test-classes/debug'])
            } else {
                if(outputTestNode.attributes['url'] != 'file://$MODULE_DIR$/build/test-classes/debug') {
                    outputTestNode.attributes = ['url': 'file://$MODULE_DIR$/build/test-classes/debug']
                    rewrite = true
                }
            }

            if(rewrite) {
                def writer = new StringWriter()
                new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                file.text = writer.toString()
            }
        } catch (FileNotFoundException e) {
            // iml not found, common on command line only builds
        }

    }
}

// always do the addtest on prebuild
gradle.projectsEvaluated {
    testDebugClasses.dependsOn(addTest)
}